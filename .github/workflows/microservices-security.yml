name: BuffrSign Microservices Security

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'microservices/**'
      - '.github/workflows/microservices-security.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'microservices/**'
      - '.github/workflows/microservices-security.yml'
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  # Security scan for Python dependencies
  security-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          'auth-service',
          'document-service',
          'signature-service',
          'email-service',
          'ai-service',
          'api-gateway'
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: microservices/${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Safety check
      working-directory: microservices/${{ matrix.service }}
      run: |
        pip install safety
        safety check --json --output safety-report-${{ matrix.service }}.json || true
    
    - name: Run Bandit security linter
      working-directory: microservices/${{ matrix.service }}
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report-${{ matrix.service }}.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ matrix.service }}
        path: |
          microservices/${{ matrix.service }}/safety-report-${{ matrix.service }}.json
          microservices/${{ matrix.service }}/bandit-report-${{ matrix.service }}.json

  # Docker security scan
  docker-security-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          'auth-service',
          'document-service',
          'signature-service',
          'email-service',
          'ai-service',
          'api-gateway'
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      working-directory: microservices/${{ matrix.service }}
      run: |
        docker build -t ${{ matrix.service }}:test .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ matrix.service }}:test'
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Sign images for production
  sign-images:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [security-scan, docker-security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Cosign
      uses: sigstore/cosign-installer@v3
    
    - name: Sign images
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      run: |
        # Sign all microservice images
        for service in auth-service document-service signature-service email-service ai-service api-gateway; do
          cosign sign --key env://COSIGN_PRIVATE_KEY ghcr.io/${{ github.repository }}/$service:latest
        done

  # Terraform security scan
  terraform-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'
    
    - name: Terraform Format Check
      working-directory: terraform/microservices
      run: terraform fmt -check
    
    - name: Run TFSec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform/microservices
        soft_fail: true
    
    - name: Upload TFSec results
      uses: actions/upload-artifact@v4
      with:
        name: tfsec-results
        path: tfsec-results.json

  # API security testing
  api-security-test:
    runs-on: ubuntu-latest
    needs: [security-scan, docker-security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install OWASP ZAP
      run: |
        wget https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_Linux.tar.gz
        tar -xzf ZAP_2.14.0_Linux.tar.gz
        sudo mv ZAP_2.14.0 /opt/zap
    
    - name: Run ZAP baseline scan
      run: |
        /opt/zap/zap.sh -cmd -quickurl https://api.buffrsign.ai -baseline -config api.disablekey=true
        /opt/zap/zap.sh -cmd -quickurl https://buffrsign.ai -baseline -config api.disablekey=true
    
    - name: Upload ZAP results
      uses: actions/upload-artifact@v4
      with:
        name: zap-security-results
        path: |
          zap-results.json
          zap-report.html

  # Dependency vulnerability check
  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run npm audit (if package.json exists)
      run: |
        if [ -f "package.json" ]; then
          npm audit --audit-level=moderate || true
        fi
    
    - name: Run pip-audit
      run: |
        pip install pip-audit
        find . -name "requirements.txt" -exec pip-audit -r {} \; || true

  # Generate security report
  security-report:
    runs-on: ubuntu-latest
    needs: [security-scan, docker-security-scan, terraform-security, api-security-test]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate security report
      run: |
        echo "# BuffrSign Microservices Security Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## Summary" >> security-report.md
        echo "- Security scans completed for all microservices" >> security-report.md
        echo "- Docker images scanned for vulnerabilities" >> security-report.md
        echo "- Terraform configuration security checked" >> security-report.md
        echo "- API endpoints security tested" >> security-report.md
        echo "" >> security-report.md
        echo "## Services Scanned" >> security-report.md
        echo "- auth-service" >> security-report.md
        echo "- document-service" >> security-report.md
        echo "- signature-service" >> security-report.md
        echo "- email-service" >> security-report.md
        echo "- ai-service" >> security-report.md
        echo "- api-gateway" >> security-report.md
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md